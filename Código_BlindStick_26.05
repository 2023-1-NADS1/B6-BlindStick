#include <WiFi.h> //Inclui a biblioteca
const char* ssid = "ESP32AP"; //Define o nome do ponto de acesso
const char* pass = "12345678"; //Define a senha
 
WiFiServer sv(80); //Cria um servidor na porta 80

const int trigPin = 12;
const int echoPin = 13;
const int PtrigPin = 14;
const int PechoPin = 27;
const int buzz = 33;
// define variaveis
long duracao;
float distancia;


void setup()
{
pinMode(trigPin, OUTPUT); // Define o trigPin como Output
pinMode(echoPin, INPUT); // Define o echoPin como Input
pinMode(PtrigPin, OUTPUT);
pinMode(PechoPin, INPUT);
pinMode(buzz, OUTPUT);
Serial.begin(9600);

Serial.begin(115200); //Inicia o monitor serial
  pinMode(buzz , OUTPUT);  //Define a buzz como saída
  delay(10);  //Atraso de 10 milissegundos
  Serial.println("\n"); //Pula uma linha
  WiFi.softAP(ssid, pass); //Inicia o ponto de acesso
  Serial.print("Se conectando a: "); //Imprime mensagem sobre o nome do ponto de acesso
  Serial.println(ssid);
  IPAddress ip = WiFi.softAPIP(); //Endereço de IP
 
  Serial.print("Endereço de IP: "); //Imprime o endereço de IP
  Serial.println(ip);
  sv.begin(); //Inicia o servidor
  Serial.println("Servidor online"); //Imprime a mensagem de início
}

void loop()
{
digitalWrite(trigPin, LOW);
delayMicroseconds(7);
// Mantem trigpin em HIGH por 10 micro segundos
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
// le o echoPin, e retorna a onda sonora e o tempo da distancia em microsegundos
duracao = pulseIn(echoPin, HIGH);
// Calculando a distancia
distancia= duracao*0.034/2.0;
// imprime a distancia no Monitor Serial
Serial.print("Distancia: ");
Serial.println(distancia);
if (distancia < 70)
{
Serial.print(distancia);
Serial.println("ALERTA DE OBJETO");
digitalWrite(buzz,HIGH);
delay(100);

digitalWrite(buzz,LOW);
for (int i= (distancia-40); i>0; i--)
delay(10);
}
{
digitalWrite(PtrigPin, LOW);
delayMicroseconds(7);
// Mantem trigpin em HIGH por 10 micro segundos
digitalWrite(PtrigPin, HIGH);
delayMicroseconds(10);
digitalWrite(PtrigPin, LOW);
// le o echoPin, e retorna a onda sonora e o tempo da distancia em microsegundos
duracao = pulseIn(PechoPin, HIGH);
// Calculando a distancia
distancia= duracao*0.030/2.0;
// imprime a distancia no Monitor Serial
Serial.print("Distancia: ");
Serial.println(distancia);
if (distancia < 70)
{
Serial.print(distancia);
Serial.println("ALERTA DE OBJETO");
digitalWrite(buzz,HIGH);
delay(100);

digitalWrite(buzz,LOW);
for (int i= (distancia-40); i>0; i--)
delay(10);
}
}
 WiFiClient client = sv.available(); //Cria o objeto cliente
  if (client) { //Se este objeto estiver disponível
    String line = ""; //Variável para armazenar os dados recebidos
    while (client.connected()) { //Enquanto estiver conectado
      if (client.available()) { //Se estiver disponível
        char c = client.read(); //Lê os caracteres recebidos
        if (c == '\n') { //Se houver uma quebra de linha
          if (line.length() == 0) { //Se a nova linha tiver 0 de tamanho
            client.println("HTTP/1.1 200 OK"); //Envio padrão de início de comunicação
            client.println("Content-type:text/html");
            client.println();
            client.print("Ligue o buzzer clicando <a href=\"/ligar\">aqui</a><br>"); //Linha para ligar o buzzer
            client.print("Desligue o buzzer clicando <a href=\"/desligar\">aqui</a><br>"); //Linha para desligar o buzzer
            client.println();
            break;
          } else {  
            line = "";
          }
        } else if (c != '\r') {
          line += c; //Adiciona o caractere recebido à linha de leitura
        }
        if (line.endsWith("GET /ligar")) { //Se a linha terminar com "/ligar", liga o led
          digitalWrite(buzz, HIGH);              
        }
        if (line.endsWith("GET /desligar")) { //Se a linha terminar com "/desligar", desliga o led
          digitalWrite(buzz, LOW);              
        }
      }
    }
    client.stop(); //Para o cliente
  }
}
